test.ph <- cox.zph(coxph_model)
test.ph
ggcoxzph(test.ph)
# Testing Outliers & Influential Cases
ggcoxdiagnostics(coxph_model,
type = "dfbeta",
linear.predictions = FALSE,
ggtheme=theme_bw())
}
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_res <- ntile(wide_dat$res, 3)
boxplot(wide_dat$res ~ wide_dat$thirtile_res,
xlab = "Thirtile of Residual Scores",
ylab = "Residuals",
main = "Check overlap between Thirtiles")
hist(wide_dat$PTEDUCAT,
xlab = "Education in Years",
ylab = "Frequency",
main = "Histogram of Education Distribution")
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_years <- ntile(wide_dat$PTEDUCAT, 3)
# Divide the PGS score for educational attainment into upper, middle and lower quartile
wide_dat$thirtile_PGS <- ntile(wide_dat$EA22, 3)
wide_dat_sub <- wide_dat[, c("RID", "thirtile_res", "res", "thirtile_years", "thirtile_PGS")]
# Merge Thirtile and residuals in long data format based on RID
long_dat <- merge(wide_dat_sub, long_dat, by="RID", all.y=TRUE)
cvalue <- list() # initialize list of cut-off values
long_dat$MMSE_norm <- normMMSE(long_dat$MMSE) # normalize MMSE
cvalue$MMSE_norm <- wide_dat %>% # Calculate cut-off value for normalized MMSE
filter(DX_0 == "CN") %>%
summarize(
value := mean(normMMSE(MMSE_0), na.rm = TRUE) - 2 * sd(normMMSE(MMSE_0), na.rm = TRUE)
) %>%
pull(value)
long_dat$MMSE_cut <- ifelse(long_dat$MMSE_norm < cvalue$MMSE_norm, 1, 0) # Group individuals by cut-off value
filtered_long_dat <- long_dat %>% #filter out NA cases (== AGE is not between 60-75)
filter(!is.na(Age_Group), VISCODE==0)
# Boxplot for MMSE by Age Group
box1 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of raw MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title     # Custom title
# Boxplot for normMMSE by Age Group
box2 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE_norm)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of norm MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title
res <- lm(MMSE ~ EA22 + Age_Group, data = long_dat)
res2 <- lm(MMSE_norm ~ EA22 + Age_Group, data = long_dat)
grid.arrange(box1, box2, ncol = 2)
summary(res)
summary(res2)
rm(filtered_long_dat, box1, box2, res, res2, wide_dat_sub)
months <- c("bl", "m03", "m06", "m12", "m18", "m24",
"m30","m36", "m42", "m48", "m54", "m60",
"m66", "m72","m78", "m84", "m90", "m96",
"m102", "m108","m114", "m120", "m126",
"m132", "m144", "m156")
time_points <- data.frame(Time = seq(0,27),
Months = c(0,3,6,12,seq(from = 18, to = 156, by = 6)))
################################################################################
# Filter & Time dependent Age & Calculate tstart and tstop
################################################################################
cox_filtered_dat <- long_dat %>% # filter the data
filter(VISCODE <= 9, AGE >= 60, AGE <= 75) %>%
arrange(RID, VISCODE) %>%
mutate(GENDER = ifelse(PTGENDER== "Male", 0,1), # Calculate numerical Gender variable
VISCODE = VISCODE + 1,
thirtile_PGS = case_when(
thirtile_PGS == 1 ~ "Low PGS",
thirtile_PGS == 2 ~ "Medium PGS",
thirtile_PGS == 3 ~ "High PGS",
TRUE ~ as.character(thirtile_PGS)),
thirtile_years = case_when(
thirtile_years == 1 ~ "Low EA",
thirtile_years == 2 ~ "Medium EA",
thirtile_years == 3 ~ "High EA",
TRUE ~ as.character(thirtile_years)),
age = AGE+(time_points$Months[match(.$VISCODE, time_points$Time)])/12,) %>%
relocate(age, .before=AGE) %>%
group_by(RID) %>%
mutate(tstart = ifelse(VISCODE == 1,0,lag(VISCODE)),
tstop = ifelse(VISCODE != 1, VISCODE,1)) %>%
arrange(RID, VISCODE) %>%
relocate(c(VISCODE,tstart,tstop), .before = thirtile_res)
################################################################################
# Set Variables Types
################################################################################
cox_filtered_dat <- cox_filtered_dat %>%
mutate(thirtile_PGS= as.factor(thirtile_PGS),
thirtile_years= as.factor(thirtile_years),
AGE = as.numeric(AGE),
age = as.numeric(age),
GENDER = as.factor(GENDER),
PTGENDER = as.factor(PTGENDER))
################################################################################
# Set Reference Level of PGS & Years
################################################################################
cox_filtered_dat <- within(cox_filtered_dat,thirtile_PGS <- relevel(thirtile_PGS, ref="Medium PGS")) # Change the Reference Level of the PGS factor
cox_filtered_dat <- within(cox_filtered_dat,thirtile_years <- relevel(thirtile_years, ref="Medium EA")) # Change the Reference Level of the EA factor
################################################################################
# Run Cox Proportional Hazards Model & Plot
################################################################################
# Creates Cox Proportional Hazards regression model
res.cox.PGS <- fit_coxph_PGS("MMSE_cut")
res.cox.years <- fit_coxph_years("MMSE_cut")
# Results of Models
summary(res.cox.PGS)
summary(res.cox.years)
# Plots the Cox model
plot_coxph_PGS(res.cox.PGS)
plot_coxph_years(res.cox.years)
# Tests model assumptions
test_coxph(res.cox.PGS)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, MMSE_cut) ~ age + sqrt(age) + log(age), data = cox_filtered_dat)
plot(residuals(res.cox.PGS))
cvalue$ADAS11 <- calc_pos_cvalue(ADAS11)
cox_filtered_dat$ADAS11_cut <- ifelse(cox_filtered_dat$ADAS11 > cvalue$ADAS11, 1, 0)
cox_filtered_dat <- filter_data(ADAS11_cut)
# Calculates cut-off values using mean + 2SD of control (cognitively normal) at baseline
calc_pos_cvalue <- function(variable) {
var_bl <- paste0(deparse(substitute(variable)), "_0")
value <- wide_dat %>%
filter(DX_0 == "CN") %>%
summarize(
{{ variable }} := mean(.[[ var_bl ]], na.rm = TRUE) + 2 * sd(.[[ var_bl ]], na.rm = TRUE)
) %>%
pull({{ variable }})  # Extract the calculated value
return(value)
}
# Calculates cut-off values using mean - 2SD of control (cognitively normal) at baseline
calc_neg_cvalue <- function(variable) {
var_bl <- paste0(deparse(substitute(variable)), "_0")
value <- wide_dat %>%
filter(DX_0 == "CN") %>%
summarize(
{{ variable }} := mean(.[[ var_bl ]], na.rm = TRUE) - 2 * sd(.[[ var_bl ]], na.rm = TRUE)
) %>%
pull({{ variable }})  # Extract the calculated value
return(value)
}
# Calculates the time dependent and independent recovery for each participant (do they recover from a drop in a cognitive test)
filter_data <- function(outcome_var){
cox_filtered_dat <- cox_filtered_dat %>%
group_by(RID) %>%
mutate(tRecovery = ifelse(lag({{outcome_var}} == 1) & {{outcome_var}} == 0, 1, 0),
tRecovery = ifelse(is.na(tRecovery),0,tRecovery),
ntRecovery = ifelse(any(tRecovery == 1),1,0),)%>%
#filter(ntRecovery==0) %>%
relocate({{outcome_var}}, .before=tRecovery)
rem_num <- cox_filtered_dat %>%
group_by(RID) %>%
summarize("0" = sum(tRecovery == 0),
"1" = sum(tRecovery == 1)) %>%
filter('1' > 0) %>%
summarize(count = n())
remission_dat[outcome_var,"Num"] <- rbind(remission_dat,rem_num)
}
# Fits a Cox Hazards model on a data frame using thirtile PGS as a main predictor
fit_coxph_PGS <- function(event, filtered_data_frame=cox_filtered_dat){
coxph(Surv(tstart, tstop, get(event)) ~ thirtile_PGS+age+PTGENDER+age*PTGENDER, # Polygenic Risk Score EA
data = filtered_data_frame)
}
# Fits a Cox Hazards model on a data frame using thirtile years as a main predictor
fit_coxph_years <- function(event, filtered_data_frame=cox_filtered_dat){
coxph(Surv(tstart, tstop, get(event)) ~ thirtile_years+age+PTGENDER+age*PTGENDER, # Years in education
data = filtered_data_frame)
}
# Plots the survival curve of a Cox Hazards model for the PGS model
plot_coxph_PGS <- function(coxph_model){
pgs_df<- with(cox_filtered_dat,
data.frame(
thirtile_PGS = c("Low PGS","Medium PGS","High PGS"),
age = rep(mean(cox_filtered_dat$age), 3),
PTGENDER = c("Male","Male","Male"))
)
ggsurvplot(
survfit(coxph_model, newdata = pgs_df),
data = cox_filtered_dat,
legend.labs = c("Low PGS","Medium PGS","High PGS"),
ggtheme = theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray"),
panel.grid.minor = element_line(color = "gray", size = 0.2)
),
title = "Survival Curve (~ PGS + AGE + GENDER + AGExGENDER)", # Need to change title
xlab = "Time",
ylab = "Survival Probability",
xlim = c(1.5, 11),
palette = c("#021636", "#bbceed", "#0a77f5"),
conf.int = FALSE  # Show confidence intervals
)
}
# Plots the survival curve of a Cox Hazards model for the years model
plot_coxph_years <- function(coxph_model){
pgs_df<- with(cox_filtered_dat,
data.frame(
thirtile_years = c("Low EA","Medium EA","High EA"),
age = rep(mean(cox_filtered_dat$age), 3),
PTGENDER = c("Male","Male","Male"))
)
ggsurvplot(
survfit(coxph_model, newdata = pgs_df),
data = cox_filtered_dat,
legend.labs = c("Low EA","Medium EA","High EA"),
ggtheme = theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray"),
panel.grid.minor = element_line(color = "gray", size = 0.2)
),
title = "Survival Curve (~ years + AGE + GENDER + AGExGENDER)", # Need to change title
xlab = "Time",
ylab = "Survival Probability",
xlim = c(1.5, 11),
palette = c("#021636", "#bbceed", "#0a77f5"),
conf.int = FALSE  # Show confidence intervals
)
}
# Tests model assumption for the model
test_coxph <- function(coxph_model){
# Testing Proportional Hazards
test.ph <- cox.zph(coxph_model)
test.ph
ggcoxzph(test.ph)
# Testing Outliers & Influential Cases
ggcoxdiagnostics(coxph_model,
type = "dfbeta",
linear.predictions = FALSE,
ggtheme=theme_bw())
}
cvalue$ADAS11 <- calc_pos_cvalue(ADAS11)
cox_filtered_dat$ADAS11_cut <- ifelse(cox_filtered_dat$ADAS11 > cvalue$ADAS11, 1, 0)
cox_filtered_dat <- filter_data(ADAS11_cut)
if (suppressWarnings(!require(dplyr))) {install.packages("dplyr"); library(dplyr)}
if (suppressWarnings(!require(NormPsy))) {install.packages("NormPsy"); library(NormPsy)}
if (suppressWarnings(!require(gridExtra))) {install.packages("gridExtra"); library(gridExtra)}
if (suppressWarnings(!require(rmdformats))) {install.packages("rmdformats"); library(rmdformats)}
if (suppressWarnings(!require(ggplot2))) {install.packages("ggplot2"); library(ggplot2)}
if (suppressWarnings(!require(survival))) {install.packages("survival"); library(survival)}
if (suppressWarnings(!require(survminer))) {install.packages("survminer"); library(survminer)}
if (suppressWarnings(!require(lme4))) {install.packages("lme4"); library(lme4)}
#if (suppressWarnings(!require(tidyverse))) {install.packages("tidyverse"); library(tidyverse)}
#if (suppressWarnings(!require(data.table))) {install.packages("data.table"); library(data.table)}
#if (suppressWarnings(!require(formattable))) {install.packages("formattable"); library(formattable)}
#if (suppressWarnings(!require(ggsurvfit))) {install.packages("ggsurvfit"); library(ggsurvfit)}
#if (suppressWarnings(!require(performance))) {install.packages("performance"); library(performance)}
#if (suppressWarnings(!require(cowplot))) {install.packages("cowplot"); library(cowplot)}
#if (suppressWarnings(!require(nlme))) {install.packages("nlme"); library(nlme)}
knitr::opts_chunk$set(echo = TRUE)
# Load in data from preprocessing and apply filter
long_dat <- read.csv("../1.\ preprocessing/output/long_dat.csv")
wide_dat <- read.csv("../1.\ preprocessing/output/wide_dat.csv")
remission_dat <- data.frame(row.names = c("MMSE_cut","ADAS11_cut", "ADAS13_cut", "ADASQ4_cut", "CDRSB_cut", "DIGITSCORE_cut", "FAQ_cut", "LDELTOTAL_cut"), "Num" = c(NA,NA,NA,NA,NA,NA,NA,NA))
# Calculates cut-off values using mean + 2SD of control (cognitively normal) at baseline
calc_pos_cvalue <- function(variable) {
var_bl <- paste0(deparse(substitute(variable)), "_0")
value <- wide_dat %>%
filter(DX_0 == "CN") %>%
summarize(
{{ variable }} := mean(.[[ var_bl ]], na.rm = TRUE) + 2 * sd(.[[ var_bl ]], na.rm = TRUE)
) %>%
pull({{ variable }})  # Extract the calculated value
return(value)
}
# Calculates cut-off values using mean - 2SD of control (cognitively normal) at baseline
calc_neg_cvalue <- function(variable) {
var_bl <- paste0(deparse(substitute(variable)), "_0")
value <- wide_dat %>%
filter(DX_0 == "CN") %>%
summarize(
{{ variable }} := mean(.[[ var_bl ]], na.rm = TRUE) - 2 * sd(.[[ var_bl ]], na.rm = TRUE)
) %>%
pull({{ variable }})  # Extract the calculated value
return(value)
}
# Calculates the time dependent and independent recovery for each participant (do they recover from a drop in a cognitive test)
filter_data <- function(outcome_var){
cox_filtered_dat <- cox_filtered_dat %>%
group_by(RID) %>%
mutate(tRecovery = ifelse(lag({{outcome_var}} == 1) & {{outcome_var}} == 0, 1, 0),
tRecovery = ifelse(is.na(tRecovery),0,tRecovery),
ntRecovery = ifelse(any(tRecovery == 1),1,0),)%>%
#filter(ntRecovery==0) %>%
relocate({{outcome_var}}, .before=tRecovery)
rem_num <- cox_filtered_dat %>%
group_by(RID) %>%
summarize("0" = sum(tRecovery == 0),
"1" = sum(tRecovery == 1)) %>%
filter('1' > 0) %>%
summarize(count = n())
remission_dat[outcome_var,"Num"] <- rbind(remission_dat,rem_num)
}
# Fits a Cox Hazards model on a data frame using thirtile PGS as a main predictor
fit_coxph_PGS <- function(event, filtered_data_frame=cox_filtered_dat){
coxph(Surv(tstart, tstop, get(event)) ~ thirtile_PGS+age+PTGENDER+age*PTGENDER, # Polygenic Risk Score EA
data = filtered_data_frame)
}
# Fits a Cox Hazards model on a data frame using thirtile years as a main predictor
fit_coxph_years <- function(event, filtered_data_frame=cox_filtered_dat){
coxph(Surv(tstart, tstop, get(event)) ~ thirtile_years+age+PTGENDER+age*PTGENDER, # Years in education
data = filtered_data_frame)
}
# Plots the survival curve of a Cox Hazards model for the PGS model
plot_coxph_PGS <- function(coxph_model){
pgs_df<- with(cox_filtered_dat,
data.frame(
thirtile_PGS = c("Low PGS","Medium PGS","High PGS"),
age = rep(mean(cox_filtered_dat$age), 3),
PTGENDER = c("Male","Male","Male"))
)
ggsurvplot(
survfit(coxph_model, newdata = pgs_df),
data = cox_filtered_dat,
legend.labs = c("Low PGS","Medium PGS","High PGS"),
ggtheme = theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray"),
panel.grid.minor = element_line(color = "gray", size = 0.2)
),
title = "Survival Curve (~ PGS + AGE + GENDER + AGExGENDER)", # Need to change title
xlab = "Time",
ylab = "Survival Probability",
xlim = c(1.5, 11),
palette = c("#021636", "#bbceed", "#0a77f5"),
conf.int = FALSE  # Show confidence intervals
)
}
# Plots the survival curve of a Cox Hazards model for the years model
plot_coxph_years <- function(coxph_model){
pgs_df<- with(cox_filtered_dat,
data.frame(
thirtile_years = c("Low EA","Medium EA","High EA"),
age = rep(mean(cox_filtered_dat$age), 3),
PTGENDER = c("Male","Male","Male"))
)
ggsurvplot(
survfit(coxph_model, newdata = pgs_df),
data = cox_filtered_dat,
legend.labs = c("Low EA","Medium EA","High EA"),
ggtheme = theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray"),
panel.grid.minor = element_line(color = "gray", size = 0.2)
),
title = "Survival Curve (~ years + AGE + GENDER + AGExGENDER)", # Need to change title
xlab = "Time",
ylab = "Survival Probability",
xlim = c(1.5, 11),
palette = c("#021636", "#bbceed", "#0a77f5"),
conf.int = FALSE  # Show confidence intervals
)
}
# Tests model assumption for the model
test_coxph <- function(coxph_model){
# Testing Proportional Hazards
test.ph <- cox.zph(coxph_model)
test.ph
ggcoxzph(test.ph)
# Testing Outliers & Influential Cases
ggcoxdiagnostics(coxph_model,
type = "dfbeta",
linear.predictions = FALSE,
ggtheme=theme_bw())
}
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_res <- ntile(wide_dat$res, 3)
boxplot(wide_dat$res ~ wide_dat$thirtile_res,
xlab = "Thirtile of Residual Scores",
ylab = "Residuals",
main = "Check overlap between Thirtiles")
hist(wide_dat$PTEDUCAT,
xlab = "Education in Years",
ylab = "Frequency",
main = "Histogram of Education Distribution")
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_years <- ntile(wide_dat$PTEDUCAT, 3)
# Divide the PGS score for educational attainment into upper, middle and lower quartile
wide_dat$thirtile_PGS <- ntile(wide_dat$EA22, 3)
wide_dat_sub <- wide_dat[, c("RID", "thirtile_res", "res", "thirtile_years", "thirtile_PGS")]
# Merge Thirtile and residuals in long data format based on RID
long_dat <- merge(wide_dat_sub, long_dat, by="RID", all.y=TRUE)
cvalue <- list() # initialize list of cut-off values
long_dat$MMSE_norm <- normMMSE(long_dat$MMSE) # normalize MMSE
cvalue$MMSE_norm <- wide_dat %>% # Calculate cut-off value for normalized MMSE
filter(DX_0 == "CN") %>%
summarize(
value := mean(normMMSE(MMSE_0), na.rm = TRUE) - 2 * sd(normMMSE(MMSE_0), na.rm = TRUE)
) %>%
pull(value)
long_dat$MMSE_cut <- ifelse(long_dat$MMSE_norm < cvalue$MMSE_norm, 1, 0) # Group individuals by cut-off value
filtered_long_dat <- long_dat %>% #filter out NA cases (== AGE is not between 60-75)
filter(!is.na(Age_Group), VISCODE==0)
# Boxplot for MMSE by Age Group
box1 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of raw MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title     # Custom title
# Boxplot for normMMSE by Age Group
box2 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE_norm)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of norm MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title
res <- lm(MMSE ~ EA22 + Age_Group, data = long_dat)
res2 <- lm(MMSE_norm ~ EA22 + Age_Group, data = long_dat)
grid.arrange(box1, box2, ncol = 2)
summary(res)
summary(res2)
rm(filtered_long_dat, box1, box2, res, res2, wide_dat_sub)
months <- c("bl", "m03", "m06", "m12", "m18", "m24",
"m30","m36", "m42", "m48", "m54", "m60",
"m66", "m72","m78", "m84", "m90", "m96",
"m102", "m108","m114", "m120", "m126",
"m132", "m144", "m156")
time_points <- data.frame(Time = seq(0,27),
Months = c(0,3,6,12,seq(from = 18, to = 156, by = 6)))
################################################################################
# Filter & Time dependent Age & Calculate tstart and tstop
################################################################################
cox_filtered_dat <- long_dat %>% # filter the data
filter(VISCODE <= 9, AGE >= 60, AGE <= 75) %>%
arrange(RID, VISCODE) %>%
mutate(GENDER = ifelse(PTGENDER== "Male", 0,1), # Calculate numerical Gender variable
VISCODE = VISCODE + 1,
thirtile_PGS = case_when(
thirtile_PGS == 1 ~ "Low PGS",
thirtile_PGS == 2 ~ "Medium PGS",
thirtile_PGS == 3 ~ "High PGS",
TRUE ~ as.character(thirtile_PGS)),
thirtile_years = case_when(
thirtile_years == 1 ~ "Low EA",
thirtile_years == 2 ~ "Medium EA",
thirtile_years == 3 ~ "High EA",
TRUE ~ as.character(thirtile_years)),
age = AGE+(time_points$Months[match(.$VISCODE, time_points$Time)])/12,) %>%
relocate(age, .before=AGE) %>%
group_by(RID) %>%
mutate(tstart = ifelse(VISCODE == 1,0,lag(VISCODE)),
tstop = ifelse(VISCODE != 1, VISCODE,1)) %>%
arrange(RID, VISCODE) %>%
relocate(c(VISCODE,tstart,tstop), .before = thirtile_res)
################################################################################
# Set Variables Types
################################################################################
cox_filtered_dat <- cox_filtered_dat %>%
mutate(thirtile_PGS= as.factor(thirtile_PGS),
thirtile_years= as.factor(thirtile_years),
AGE = as.numeric(AGE),
age = as.numeric(age),
GENDER = as.factor(GENDER),
PTGENDER = as.factor(PTGENDER))
################################################################################
# Set Reference Level of PGS & Years
################################################################################
cox_filtered_dat <- within(cox_filtered_dat,thirtile_PGS <- relevel(thirtile_PGS, ref="Medium PGS")) # Change the Reference Level of the PGS factor
cox_filtered_dat <- within(cox_filtered_dat,thirtile_years <- relevel(thirtile_years, ref="Medium EA")) # Change the Reference Level of the EA factor
################################################################################
# Run Cox Proportional Hazards Model & Plot
################################################################################
# Creates Cox Proportional Hazards regression model
res.cox.PGS <- fit_coxph_PGS("MMSE_cut")
res.cox.years <- fit_coxph_years("MMSE_cut")
# Results of Models
summary(res.cox.PGS)
summary(res.cox.years)
# Plots the Cox model
plot_coxph_PGS(res.cox.PGS)
plot_coxph_years(res.cox.years)
# Tests model assumptions
test_coxph(res.cox.PGS)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, MMSE_cut) ~ age + sqrt(age) + log(age), data = cox_filtered_dat)
plot(residuals(res.cox.PGS))
cvalue$ADAS11 <- calc_pos_cvalue(ADAS11)
cox_filtered_dat$ADAS11_cut <- ifelse(cox_filtered_dat$ADAS11 > cvalue$ADAS11, 1, 0)
cox_filtered_dat <- filter_data(ADAS11_cut)
