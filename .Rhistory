mPACCtrailsB = as.numeric(mPACCtrailsB)
)
ivars <- ivars %>% filter(!str_detect(variable, "_bl|_BL") & variable != "DX_bl") %>%
pull(variable) %>%
as.character()
nivars <- nivars %>%
filter(! str_detect(variable, "VISCODE")) %>%
pull(variable) %>%
as.character()
wide_dat <- pivot_wider(
long_dat,
id_cols = all_of(ivars),
names_from = "VISCODE",
values_from = all_of(nivars),
values_fn = list(n = n_distinct),
names_sep = "_"
)
head(wide_dat)
# Create histogram of general age range in data set
ggplot(long_dat %>% distinct(RID, .keep_all = TRUE), aes(x = AGE)) +
geom_histogram(binwidth = 1, fill = "#bbceed", color = "black") +
geom_vline(xintercept = c(60, 70), linetype = "dashed", color = "#940914", size=1) +  # vertical lines age range
geom_vline(xintercept = c(65, 75), linetype = "dashed", color = "#940914", size=1) +  # vertical lines age range
labs(title = "Histogram Age Distribution",
x = "Age",
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(face = "bold", hjust = 0.5),  # Bold and centred title
axis.line = element_line(size = 0.5))  # Thicker axis lines
# create data frames of two age groups
age_60to70_df <- long_dat %>% # Data frame filtered for age
filter(AGE >= 60 & AGE <= 70)
age_65to75_df <- long_dat %>% # Data frame filtered for age
filter(AGE >= 65 & AGE <= 75)
age_60to75_df <- long_dat %>% # Data frame filtered for age
filter(AGE >= 60 & AGE <= 75)
# AGE Groups (1,2,3 for 60-65, 66-70, 71-75)
long_dat$Age_Group <- ifelse(
long_dat$AGE >= 60.0 & long_dat$AGE <= 65.0, 1,
ifelse(
long_dat$AGE >= 66.0 & long_dat$AGE <= 70.0, 2,
ifelse(
long_dat$AGE >= 71.0 & long_dat$AGE <= 75.0, 3,
NA_integer_
)
)
)
# Append to Wide data frame too
wide_dat <- wide_dat %>%
left_join(
long_dat %>%
group_by(RID) %>%
filter(row_number() == 1) %>%  # Keep only the first row for each unique RID
select(RID, Age_Group),
by = "RID"
)
frequency_table <- long_dat %>%
group_by(VISCODE) %>%
summarise(NumParticipants = n_distinct(RID))
barplot(frequency_table$NumParticipants~frequency_table$VISCODE, xlab="Time", ylab="Number of Patients Measured",
main="Attrition Plot")
df_demographics <- long_dat %>%
select(RID, PTID, VISCODE, AGE, PTGENDER, PTEDUCAT, PTETHCAT, PTRACCAT, PTMARRY)
freq_dem <- df_demographics %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_dem_long <- pivot_longer(freq_dem, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_dem_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
df_cognitive_tests <- long_dat %>%
select(RID, PTID, VISCODE, CDRSB, ADAS11, ADAS13, ADASQ4, MMSE,
RAVLT_immediate, RAVLT_learning, RAVLT_forgetting, RAVLT_perc_forgetting,
LDELTOTAL, DIGITSCOR, TRABSCOR, FAQ, MOCA,
EcogPtMem, EcogPtLang, EcogPtVisspat, EcogPtPlan, EcogPtOrgan, EcogPtDivatt, EcogPtTotal,
EcogSPMem, EcogSPLang, EcogSPVisspat, EcogSPPlan, EcogSPOrgan, EcogSPDivatt, EcogSPTotal)
freq_cog <- df_cognitive_tests %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_cog_long <- pivot_longer(freq_cog, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_cog_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
df_biomedical_imaging <- long_dat %>%
select(RID, PTID, VISCODE, Ventricles, Hippocampus, WholeBrain, Entorhinal, Fusiform, MidTemp, ICV)
freq_imag <- df_biomedical_imaging %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_imag_long <- pivot_longer(freq_imag, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_imag_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
df_biomarkers <- long_dat %>%
select(RID, PTID, VISCODE, APOE4, ABETA, TAU, PTAU, FDG, PIB, AV45)
freq_mark <- df_biomarkers %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_mark_long <- pivot_longer(freq_mark, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_mark_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
rm(list= setdiff(ls(), c("long_dat", "wide_dat")))
# Read in the PGS send to us by Rick
pgs <- readr::read_tsv("data/ADNI_PRS_results_EA_EA22.tsv")
# Merge the EA data with the corresponding participant in each data frame
long_dat <- merge(long_dat, pgs,by.x="PTID",by.y="SampleID")
wide_dat <- merge(wide_dat, pgs,by.x="PTID",by.y="SampleID")
# Plot PGS EA against Actual EA
ggplot(long_dat, aes(x = PTEDUCAT, y = EA22)) +
geom_point() +  # Add points
geom_smooth(method = "lm") +  # Add linear regression line
labs(x = "Years of Education", y = "EA22") +  # Set axis labels
ggtitle("EA22 vs Years of Education")  # Set plot title
cor(long_dat$PTEDUCAT, long_dat$EA22, method="pearson")
cor.test(long_dat$PTEDUCAT, long_dat$EA22, method="pearson")
# Linear regression model
model <- lm(PTEDUCAT~EA22+AGE+PTGENDER,data=long_dat)
# Check model assumptions
check_model(model)
# Create the residuals given two covariates AGE and Sex
results <- lm(PTEDUCAT~EA22+AGE+PTGENDER,data=long_dat)
# Standardize the residuals and append to data frame
long_dat$res <- rstandard(results)
# Create density plot of the residuals
ggplot(long_dat, aes(x = res)) +
geom_density(fill = "orange", alpha = 0.5) +
labs(x = "Residual Score", y = "Density") +
ggtitle("Distribution of Residuals")
residuals <- results$residuals # get residuals
predicted_scores <- predict(results) # get predicted scores for each individual
combined_df <- data.frame(Actual = long_dat$PTEDUCAT, Predicted = as.numeric(predicted_scores), Residuals = as.numeric(residuals)) # Combine residuals, predicted scores, and actual scores into one data frame
head(combined_df %>% filter(!duplicated(Actual))) # present data frame as example
# Create a residual plot
ggplot() +
geom_qq(aes(sample = residuals)) +
geom_qq_line() +
labs(title = "Normal Q-Q Plot of Residuals") +
theme_minimal()
# Divide the standardized residuals into upper, middle and lower quartile
long_dat$thirtile_res <- ntile(long_dat$res, 3)
# Divide the PGS score for educational attainment into upper, middle and lower quartile
long_dat$thirtile_PGS <- ntile(long_dat$EA22, 3)
cvalue <- list() # initialize list of cut-off values
logrank_test <- list() # initialize list of log-rank tests
long_dat$MMSE_norm <- normMMSE(long_dat$MMSE) # normalize MMSE
cvalue$MMSE_norm <- wide_dat %>% # Calculate cut-off value for normalized MMSE
filter(DX_0 == "CN") %>%
summarize(
value := mean(normMMSE(MMSE_0), na.rm = TRUE) - 2 * sd(normMMSE(MMSE_0), na.rm = TRUE)
) %>%
pull(value)
long_dat$MMSE_norm_cut <- ifelse(long_dat$MMSE_norm < cvalue$MMSE_norm, 1, 0) # Group individuals by cut-off value
cvalue <- list() # initialize list of cut-off values
logrank_test <- list() # initialize list of log-rank tests
long_dat$MMSE_norm <- normMMSE(long_dat$MMSE) # normalize MMSE
cvalue$MMSE_norm <- wide_dat %>% # Calculate cut-off value for normalized MMSE
filter(DX_0 == "CN") %>%
summarize(
value := mean(normMMSE(MMSE_0), na.rm = TRUE) - 2 * sd(normMMSE(MMSE_0), na.rm = TRUE)
) %>%
pull(value)
long_dat$MMSE_cut <- ifelse(long_dat$MMSE_norm < cvalue$MMSE_norm, 1, 0) # Group individuals by cut-off value
cvalue$MMSE_norm
filtered_long_dat <- long_dat %>% #filter out NA cases (== AGE is not between 60-75)
filter(!is.na(Age_Group), VISCODE==0)
# Boxplot for MMSE by Age Group
box1 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of raw MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title     # Custom title
# Boxplot for normMMSE by Age Group
box2 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE_norm)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of norm MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title
res <- lm(MMSE ~ EA22 + Age_Group, data = long_dat)
res2 <- lm(MMSE_norm ~ EA22 + Age_Group, data = long_dat)
grid.arrange(box1, box2, ncol = 2)
summary(res)
summary(res2)
rm(filtered_long_dat, box1, box2, res, res2)
################################################################################
# MMSE~Genetic Capacity
################################################################################
# Fit the Kaplan-Meier estimator (MMSE~PGS)
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot (MMSE~PGS)
par(mfrow=c(1,2))
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (MMSE~PGS)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low capacity", "Average", "High capacity"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test (MMSE~PGS)
logrank_test$MMSE_PGS <- long_dat %>%
filter(as.integer(VISCODE) <= 9, thirtile_PGS != 2, AGE>=60, AGE<=75) %>%
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
################################################################################
# MMSE~Residual EA
################################################################################
# Fit the Kaplan-Meier estimator (MMSE~res)
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
# Create the Kaplan-Meier survival plot (MMSE~res)
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (MMSE~res)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)  # Adjust the size of the title
legend("bottomleft",
legend = c("Underperformed", "Average", "Overperformed"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test (MMSE~res)
logrank_test$MMSE_res <- long_dat %>%
filter(as.integer(VISCODE) <= 9, thirtile_res != 2, AGE>=60, AGE<=75) %>%
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
par(mfrow=c(1,3)) # Set parameters for plots
################################################################################
# MMSE~Residual EA by Genetic Capacity (Low)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_PGS==1) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Low PGS)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Underachiever", "Average", "Overachiever"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_res_low <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_res != 2,
thirtile_PGS==1) %>% # Low PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
################################################################################
# MMSE~Residual EA by Genetic Capacity (Middle)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_PGS==2) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Middle PGS)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Underachiever", "Average", "Overachiever"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_res_mid <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_res != 2,
thirtile_PGS==2) %>% # Middle PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
################################################################################
# MMSE~Residual EA by Genetic Capacity (High)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_PGS==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (High PGS)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Underachiever", "Average", "Overachiever"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_res_high <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_res != 2,
thirtile_PGS==3) %>% # High PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
################################################################################
# Histogram # people by time point by group by outcome
################################################################################
ggplot(long_dat %>% filter(!is.na(MMSE_cut)),
aes(x = as.integer(VISCODE), fill = factor(MMSE_cut))) +
geom_histogram(position = "identity", alpha = 0.6, binwidth = 2) +
scale_fill_manual(values = c("#bbceed", "#021636"), labels = c("Normal Cognition", "Impaired Cognition")) +
facet_wrap(~ thirtile_res, ncol = 3,
labeller = labeller(thirtile_res = c("1" = "Underperformed",
"2" = "Average",
"3" = "Overperformed"))) +
labs(title = "Number of observations by time by group by outcome",
x = "Time", y = "Number of participants",
fill = "Legend Title") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold")) +
geom_vline(xintercept = 9, linetype = "dashed", color = "#940914")  # Add  vertical dashed line
mean(wide_dat$MMSE_0, na.rm = TRUE) - 2 * sd(wide_dat$MMSE_0, na.rm = TRUE)
cvalue$MMSE_norm
################################################################################
# Histogram # people by time point by group by outcome
################################################################################
ggplot(long_dat %>% filter(!is.na(MMSE_cut)),
aes(x = as.integer(VISCODE), fill = factor(MMSE_cut))) +
geom_histogram(position = "identity", alpha = 0.6, binwidth = 2) +
scale_fill_manual(values = c("#bbceed", "#021636"), labels = c("Normal Cognition", "Impaired Cognition")) +
facet_wrap(~ thirtile_res, ncol = 3,
labeller = labeller(thirtile_res = c("1" = "Underperformed",
"2" = "Average",
"3" = "Overperformed"))) +
labs(title = "Number of observations by time by group by outcome",
x = "Time", y = "Number of participants",
fill = "Legend Title") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold")) +
geom_vline(xintercept = 9, linetype = "dashed", color = "#940914")  # Add  vertical dashed line
################################################################################
# MMSE~Residual EA by Genetic Capacity (High)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (High PGS)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Underachiever", "Average", "Overachiever"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
################################################################################
# MMSE~Residual EA by Genetic Capacity (High)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Overachiever)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Average PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
par(mfrow=c(1,3)) # Set parameters for plots
################################################################################
# MMSE~ by Genetic Capacity by Residual EA (Underachiever)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==1) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Underachiever)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Middle PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_PGS_low <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_PGS != 2,
thirtile_res==1) %>% # Low PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
################################################################################
# MMSE~ by Genetic Capacity by Residual EA (Average Performance)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==2) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Average Performance)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Middle PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_PGS_mid <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_PGS != 2,
thirtile_res==2) %>% # Middle PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
################################################################################
# MMSE~ by Genetic Capacity by Residual EA (Overachiever)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Overachiever)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Middle PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_PGS_high <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_PGS != 2,
thirtile_res==3) %>% # High PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
logrank_test$MMSE_PGS_high
logrank_test$MMSE_PGS_middle
logrank_test$MMSE_PGS_mid
logrank_test$MMSE_PGS_low
