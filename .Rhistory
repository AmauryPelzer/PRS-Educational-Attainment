lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_res_mid <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_res != 2,
thirtile_PGS==2) %>% # Middle PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
################################################################################
# MMSE~Residual EA by Genetic Capacity (High)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_PGS==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (High PGS)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Underachiever", "Average", "Overachiever"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_res_high <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_res != 2,
thirtile_PGS==3) %>% # High PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_res, data = .)
################################################################################
# Histogram # people by time point by group by outcome
################################################################################
ggplot(long_dat %>% filter(!is.na(MMSE_cut)),
aes(x = as.integer(VISCODE), fill = factor(MMSE_cut))) +
geom_histogram(position = "identity", alpha = 0.6, binwidth = 2) +
scale_fill_manual(values = c("#bbceed", "#021636"), labels = c("Normal Cognition", "Impaired Cognition")) +
facet_wrap(~ thirtile_res, ncol = 3,
labeller = labeller(thirtile_res = c("1" = "Underperformed",
"2" = "Average",
"3" = "Overperformed"))) +
labs(title = "Number of observations by time by group by outcome",
x = "Time", y = "Number of participants",
fill = "Legend Title") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold")) +
geom_vline(xintercept = 9, linetype = "dashed", color = "#940914")  # Add  vertical dashed line
mean(wide_dat$MMSE_0, na.rm = TRUE) - 2 * sd(wide_dat$MMSE_0, na.rm = TRUE)
cvalue$MMSE_norm
################################################################################
# Histogram # people by time point by group by outcome
################################################################################
ggplot(long_dat %>% filter(!is.na(MMSE_cut)),
aes(x = as.integer(VISCODE), fill = factor(MMSE_cut))) +
geom_histogram(position = "identity", alpha = 0.6, binwidth = 2) +
scale_fill_manual(values = c("#bbceed", "#021636"), labels = c("Normal Cognition", "Impaired Cognition")) +
facet_wrap(~ thirtile_res, ncol = 3,
labeller = labeller(thirtile_res = c("1" = "Underperformed",
"2" = "Average",
"3" = "Overperformed"))) +
labs(title = "Number of observations by time by group by outcome",
x = "Time", y = "Number of participants",
fill = "Legend Title") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold")) +
geom_vline(xintercept = 9, linetype = "dashed", color = "#940914")  # Add  vertical dashed line
################################################################################
# MMSE~Residual EA by Genetic Capacity (High)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (High PGS)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Underachiever", "Average", "Overachiever"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
################################################################################
# MMSE~Residual EA by Genetic Capacity (High)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Overachiever)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Average PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
par(mfrow=c(1,3)) # Set parameters for plots
################################################################################
# MMSE~ by Genetic Capacity by Residual EA (Underachiever)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==1) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Underachiever)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Middle PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_PGS_low <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_PGS != 2,
thirtile_res==1) %>% # Low PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
################################################################################
# MMSE~ by Genetic Capacity by Residual EA (Average Performance)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==2) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Average Performance)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Middle PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_PGS_mid <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_PGS != 2,
thirtile_res==2) %>% # Middle PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
################################################################################
# MMSE~ by Genetic Capacity by Residual EA (Overachiever)
################################################################################
# Fit the Kaplan-Meier estimator
surv_fit <- long_dat %>%
filter(as.integer(VISCODE) <= 9, AGE>=60, AGE<=75, thirtile_res==3) %>%
survfit(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
# Create the Kaplan-Meier survival plot
plot(surv_fit,
main = "Kaplan-Meier Survival Curve (Overachiever)",
xlab = "Time",
ylab = "Survival Probability",
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2,
xlim = c(0, 10),
cex.main = 0.95)
legend("bottomleft",
legend = c("Low PGS", "Middle PGS", "High PGS"),
col = c("#021636", "#bbceed", "#0a77f5"),
lwd = 2)
axis(1, lwd = 1)  # Change x-axis thickness
axis(2, lwd = 1)  # Change y-axis thickness
# Log Rank Test
logrank_test$MMSE_PGS_high <- long_dat %>%
filter(as.integer(VISCODE) <= 9,
thirtile_PGS != 2,
thirtile_res==3) %>% # High PGS
survdiff(Surv(as.integer(VISCODE), MMSE_cut) ~ thirtile_PGS, data = .)
logrank_test$MMSE_PGS_high
logrank_test$MMSE_PGS_middle
logrank_test$MMSE_PGS_mid
logrank_test$MMSE_PGS_low
if (suppressWarnings(!require(tidyverse))) {install.packages("tidyverse"); library(tidyverse)}
if (suppressWarnings(!require(ggplot2))) {install.packages("ggplot2"); library(ggplot2)}
if (suppressWarnings(!require(data.table))) {install.packages("data.table"); library(data.table)}
if (suppressWarnings(!require(formattable))) {install.packages("formattable"); library(formattable)}
if (suppressWarnings(!require(survival))) {install.packages("survival"); library(survival)}
if (suppressWarnings(!require(ggsurvfit))) {install.packages("ggsurvfit"); library(ggsurvfit)}
if (suppressWarnings(!require(performance))) {install.packages("performance"); library(performance)}
if (suppressWarnings(!require(cowplot))) {install.packages("cowplot"); library(cowplot)}
if (suppressWarnings(!require(NormPsy))) {install.packages("NormPsy"); library(NormPsy)}
if (suppressWarnings(!require(gridExtra))) {install.packages("gridExtra"); library(gridExtra)}
if (suppressWarnings(!require(rmdformats))) {install.packages("rmdformats"); library(rmdformats)}
if (suppressWarnings(!require(nlme))) {install.packages("nlme"); library(nlme)}
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("data/ADNIMERGE.csv")
time_test <- function(data, idvar, tvar) {
x <- data[, c(idvar, tvar)] %>% arrange(tvar)
time_dependent <- FALSE
unique_participants <- unique(x[, 1])
for (participant in unique_participants) {
participant_data <- x[x[, 1] == participant, 2]
if (length(unique(participant_data)) > 1) {
time_dependent <- TRUE
break
}
}
if (time_dependent) {
return(data.frame(variable = tvar, status = "Time Dependent"))
} else {
return(data.frame(variable = tvar, status = "Time Independent"))
}
}
results <- data.frame(variable = character(), status = character(), stringsAsFactors = FALSE)
for (col in 1:length(colnames(dat))) {
result <- time_test(dat, "RID", colnames(dat)[col])
results <- rbind(results, result)
}
excluded_vars <- c("SITE","COLPROT","ORIGPROT","FLDSTRENG",
"FSVERSION","IMAGEUID", "Month_bl","Month","M",
"update_stamp", "FSVERSION_bl", "FLDSTRENG_bl",
"EXAMDATE_bl", "EXAMDATE", "Years_bl")
ivars <- subset(results, status=="Time Independent") %>%
subset(!(variable %in% excluded_vars)) %>% subset(select=variable)
nivars <- subset(results, status=="Time Dependent") %>%
subset(!(variable %in% excluded_vars)) %>% subset(select=variable)
rm(results, result, col)
long_dat <- dat[, c(ivars[,1], nivars[,1])] %>%
mutate(VISCODE = match(VISCODE, c("bl", "m03", "m06", "m12", "m18", "m24",
"m30","m36", "m42", "m48", "m54", "m60",
"m66", "m72","m78", "m84", "m90", "m96",
"m102", "m108","m114", "m120", "m126",
"m132", "m144", "m156"))-1) %>%
relocate(RID, PTID, VISCODE) %>%
arrange(RID, VISCODE)
baseline_vars <- long_dat %>%
select(c("VISCODE","PTID",ends_with("_bl"),ends_with("_BL"))) %>%
filter(VISCODE == 0) %>%
subset(select = -c(DX_bl, VISCODE)) %>%
rename(LDELTOTAL_bl = LDELTOTAL_BL)
baseline_commplementary_vars <- long_dat %>%
subset(select = c(VISCODE, DX, CDRSB, ADAS11, ADAS13, ADASQ4,MMSE,
RAVLT_immediate,RAVLT_learning,RAVLT_forgetting,RAVLT_perc_forgetting,
LDELTOTAL,DIGITSCOR,TRABSCOR,FAQ,mPACCdigit,mPACCtrailsB,Ventricles,
Hippocampus,WholeBrain,Entorhinal,Fusiform,MidTemp,ICV,MOCA,EcogPtMem,
EcogPtLang,EcogPtVisspat,EcogPtPlan,EcogPtOrgan,EcogPtDivatt,EcogPtTotal,
EcogSPMem,EcogSPLang,EcogSPVisspat,EcogSPPlan,EcogSPOrgan,EcogSPDivatt,
EcogSPTotal,ABETA,TAU,PTAU,FDG,PIB,AV45)) %>%
filter(VISCODE == 0) %>%
subset(select = -c(DX, VISCODE))
length(colnames(baseline_vars)) == length(colnames(baseline_commplementary_vars))
all.equal(baseline_vars, baseline_commplementary_vars)
baseline_commplementary_col_names <- colnames(baseline_commplementary_vars)
long_dat <- long_dat %>%
left_join(baseline_vars, by = "PTID", suffix = c("", "_bl")) %>%
mutate(across(all_of(baseline_commplementary_col_names), ~ coalesce(., get(paste0(cur_column(), "_bl"))))) %>%
select(-ends_with("_bl"), -ends_with("_BL")) %>%
mutate(
RID = as.factor(RID),
PTID = as.character(PTID),
VISCODE = as.numeric(VISCODE),
AGE = as.numeric(AGE),
PTGENDER = as.factor(PTGENDER),
PTEDUCAT = as.integer(PTEDUCAT),
PTETHCAT = as.factor(PTETHCAT),
PTRACCAT = as.factor(PTRACCAT),
PTMARRY = as.factor(PTMARRY),
APOE4 = as.integer(APOE4),
FDG = as.numeric(FDG),
PIB = as.numeric(PIB),
AV45 = as.numeric(AV45),
ABETA = as.numeric(ABETA),
TAU = as.numeric(TAU),
PTAU = as.numeric(PTAU),
CDRSB = as.numeric(CDRSB),
ADAS11 = as.numeric(ADAS11),
ADAS13 = as.numeric(ADAS13),
ADASQ4 = as.integer(ADASQ4),
MMSE = as.integer(MMSE),
RAVLT_immediate = as.integer(RAVLT_immediate),
RAVLT_learning = as.integer(RAVLT_learning),
RAVLT_forgetting = as.integer(RAVLT_forgetting),
RAVLT_perc_forgetting = as.numeric(RAVLT_perc_forgetting),
LDELTOTAL = as.integer(LDELTOTAL),
DIGITSCOR = as.integer(DIGITSCOR),
TRABSCOR = as.integer(TRABSCOR),
FAQ = as.integer(FAQ),
MOCA = as.integer(MOCA),
EcogPtMem = as.numeric(EcogPtMem),
EcogPtLang = as.numeric(EcogPtLang),
EcogPtVisspat = as.numeric(EcogPtVisspat),
EcogPtPlan = as.numeric(EcogPtPlan),
EcogPtOrgan = as.numeric(EcogPtOrgan),
EcogPtDivatt = as.numeric(EcogPtDivatt),
EcogPtTotal = as.numeric(EcogPtTotal),
EcogSPMem = as.numeric(EcogSPMem),
EcogSPLang = as.numeric(EcogSPLang),
EcogSPVisspat = as.numeric(EcogSPVisspat),
EcogSPPlan = as.numeric(EcogSPPlan),
EcogSPOrgan = as.numeric(EcogSPOrgan),
EcogSPDivatt = as.numeric(EcogSPDivatt),
EcogSPTotal = as.numeric(EcogSPTotal),
Ventricles = as.integer(Ventricles),
Hippocampus = as.integer(Hippocampus),
WholeBrain = as.integer(WholeBrain),
Entorhinal = as.integer(Entorhinal),
Fusiform = as.integer(Fusiform),
MidTemp = as.integer(MidTemp),
ICV = as.integer(ICV),
DX = as.factor(DX),
mPACCdigit = as.numeric(mPACCdigit),
mPACCtrailsB = as.numeric(mPACCtrailsB)
)
ivars <- ivars %>% filter(!str_detect(variable, "_bl|_BL") & variable != "DX_bl") %>%
pull(variable) %>%
as.character()
nivars <- nivars %>%
filter(! str_detect(variable, "VISCODE")) %>%
pull(variable) %>%
as.character()
wide_dat <- pivot_wider(
long_dat,
id_cols = all_of(ivars),
names_from = "VISCODE",
values_from = all_of(nivars),
values_fn = list(n = n_distinct),
names_sep = "_"
)
head(wide_dat)
# Create histogram of general age range in data set
ggplot(long_dat %>% distinct(RID, .keep_all = TRUE), aes(x = AGE)) +
geom_histogram(binwidth = 1, fill = "#bbceed", color = "black") +
geom_vline(xintercept = c(60, 70), linetype = "dashed", color = "#940914", size=1) +  # vertical lines age range
geom_vline(xintercept = c(65, 75), linetype = "dashed", color = "#940914", size=1) +  # vertical lines age range
labs(title = "Histogram Age Distribution",
x = "Age",
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(face = "bold", hjust = 0.5),  # Bold and centred title
axis.line = element_line(size = 0.5))  # Thicker axis lines
# create data frames of two age groups
age_60to70_df <- long_dat %>% # Data frame filtered for age
filter(AGE >= 60 & AGE <= 70)
age_65to75_df <- long_dat %>% # Data frame filtered for age
filter(AGE >= 65 & AGE <= 75)
age_60to75_df <- long_dat %>% # Data frame filtered for age
filter(AGE >= 60 & AGE <= 75)
# AGE Groups (1,2,3 for 60-65, 66-70, 71-75)
long_dat$Age_Group <- ifelse(
long_dat$AGE >= 60.0 & long_dat$AGE <= 65.0, 1,
ifelse(
long_dat$AGE >= 66.0 & long_dat$AGE <= 70.0, 2,
ifelse(
long_dat$AGE >= 71.0 & long_dat$AGE <= 75.0, 3,
NA_integer_
)
)
)
# Append to Wide data frame too
wide_dat <- wide_dat %>%
left_join(
long_dat %>%
group_by(RID) %>%
filter(row_number() == 1) %>%  # Keep only the first row for each unique RID
select(RID, Age_Group),
by = "RID"
)
frequency_table <- long_dat %>%
group_by(VISCODE) %>%
summarise(NumParticipants = n_distinct(RID))
barplot(frequency_table$NumParticipants~frequency_table$VISCODE, xlab="Time", ylab="Number of Patients Measured",
main="Attrition Plot")
df_demographics <- long_dat %>%
select(RID, PTID, VISCODE, AGE, PTGENDER, PTEDUCAT, PTETHCAT, PTRACCAT, PTMARRY)
freq_dem <- df_demographics %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_dem_long <- pivot_longer(freq_dem, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_dem_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
df_cognitive_tests <- long_dat %>%
select(RID, PTID, VISCODE, CDRSB, ADAS11, ADAS13, ADASQ4, MMSE,
RAVLT_immediate, RAVLT_learning, RAVLT_forgetting, RAVLT_perc_forgetting,
LDELTOTAL, DIGITSCOR, TRABSCOR, FAQ, MOCA,
EcogPtMem, EcogPtLang, EcogPtVisspat, EcogPtPlan, EcogPtOrgan, EcogPtDivatt, EcogPtTotal,
EcogSPMem, EcogSPLang, EcogSPVisspat, EcogSPPlan, EcogSPOrgan, EcogSPDivatt, EcogSPTotal)
freq_cog <- df_cognitive_tests %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_cog_long <- pivot_longer(freq_cog, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_cog_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
df_biomedical_imaging <- long_dat %>%
select(RID, PTID, VISCODE, Ventricles, Hippocampus, WholeBrain, Entorhinal, Fusiform, MidTemp, ICV)
freq_imag <- df_biomedical_imaging %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_imag_long <- pivot_longer(freq_imag, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_imag_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
df_biomarkers <- long_dat %>%
select(RID, PTID, VISCODE, APOE4, ABETA, TAU, PTAU, FDG, PIB, AV45)
freq_mark <- df_biomarkers %>%
group_by(VISCODE) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
freq_mark_long <- pivot_longer(freq_mark, cols = -VISCODE, names_to = "Variable", values_to = "Frequency")
ggplot(freq_mark_long, aes(x = VISCODE, y = Frequency, color = Variable, group = Variable)) +
geom_line() +
labs(x = "Timepoint (VISCODE)", y = "Number of Measurements", title = "Number of Measurements per Time Point") +
theme(legend.position = "top")
rm(list= setdiff(ls(), c("long_dat", "wide_dat")))
# Read in the PGS send to us by Rick
pgs <- readr::read_tsv("data/ADNI_PRS_results_EA_EA22.tsv")
# Merge the EA data with the corresponding participant in each data frame
long_dat <- merge(long_dat, pgs,by.x="PTID",by.y="SampleID")
wide_dat <- merge(wide_dat, pgs,by.x="PTID",by.y="SampleID")
# Plot PGS EA against Actual EA
ggplot(long_dat, aes(x = PTEDUCAT, y = EA22)) +
geom_point() +  # Add points
geom_smooth(method = "lm") +  # Add linear regression line
labs(x = "Years of Education", y = "EA22") +  # Set axis labels
ggtitle("EA22 vs Years of Education")  # Set plot title
cor(long_dat$PTEDUCAT, long_dat$EA22, method="pearson")
cor.test(long_dat$PTEDUCAT, long_dat$EA22, method="pearson")
lm(PTEDUCAT~PTGENDER, data=wide_dat)
boxplot(PTEDUCAT~PTGENDER, data=wide_dat)
lm(EA22~PTGENDER, data=wide_dat)
boxplot(EA22~PTGENDER, data=wide_dat)
# compare n gender
table(wide_dat$PTGENDER)
# Linear regression model
model <- lm(PTEDUCAT~EA22+AGE+PTGENDER + AGE*PTGENDER,data=wide_dat)
# Check model assumptions
check_model(model)
# Create the residuals given two covariates AGE and Sex
results <- lm(PTEDUCAT~EA22+AGE+PTGENDER+AGE*PTGENDER,data=wide_dat)
# Standardize the residuals and append to data frame
wide_dat$res <- rstandard(results)
# Create density plot of the residuals
ggplot(wide_dat, aes(x = res)) +
geom_density(fill = "orange", alpha = 0.5) +
labs(x = "Residual Score", y = "Density") +
ggtitle("Distribution of Residuals")
residuals <- results$residuals # get residuals
predicted_scores <- predict(results) # get predicted scores for each individual
combined_df <- data.frame(Actual = wide_dat$PTEDUCAT, Predicted = as.numeric(predicted_scores), Residuals = as.numeric(residuals)) # Combine residuals, predicted scores, and actual scores into one data frame
head(combined_df %>% filter(!duplicated(Actual))) # present data frame as example
# Create a residual plot
ggplot() +
geom_qq(aes(sample = residuals)) +
geom_qq_line() +
labs(title = "Normal Q-Q Plot of Residuals") +
theme_minimal()
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_res <- ntile(wide_dat$res, 3)
boxplot(wide_dat$res ~ wide_dat$thirtile_res,
xlab = "Thirtile of Residual Scores",
ylab = "Residuals",
main = "Check overlap between Thirtiles")
hist(wide_dat$PTEDUCAT,
xlab = "Education in Years",
ylab = "Frequency",
main = "Histogram of Education Distribution")
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_years <- ntile(wide_dat$PTEDUCAT, 3)
# Divide the PGS score for educational attainment into upper, middle and lower quartile
wide_dat$thirtile_PGS <- ntile(wide_dat$EA22, 3)
wide_dat_sub <- wide_dat[, c("RID", "thirtile_res", "res", "thirtile_years", "thirtile_PGS")]
# Merge Thirtile and residuals in long data format based on RID
long_dat <- merge(wide_dat_sub, long_dat, by="RID", all.y=TRUE)
cvalue <- list() # initialize list of cut-off values
logrank_test <- list() # initialize list of log-rank tests
long_dat$MMSE_norm <- normMMSE(long_dat$MMSE) # normalize MMSE
cvalue$MMSE_norm <- wide_dat %>% # Calculate cut-off value for normalized MMSE
filter(DX_0 == "CN") %>%
summarize(
value := mean(normMMSE(MMSE_0), na.rm = TRUE) - 2 * sd(normMMSE(MMSE_0), na.rm = TRUE)
) %>%
pull(value)
long_dat$MMSE_cut <- ifelse(long_dat$MMSE_norm < cvalue$MMSE_norm, 1, 0) # Group individuals by cut-off value
