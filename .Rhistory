arrange(RID, VISCODE) %>%
mutate(GENDER = ifelse(PTGENDER== "Male", 0,1), # Calculate numerical Gender variable
AGExGENDER = AGE*GENDER, # Calculate interaction term manually
VISCODE = VISCODE + 1,
thirtile_PGS = case_when(
thirtile_PGS == 1 ~ "Low PGS",
thirtile_PGS == 2 ~ "Medium PGS",
thirtile_PGS == 3 ~ "High PGS",
TRUE ~ as.character(thirtile_PGS)
)
)
cox_filtered_dat <- cox_filtered_dat %>%
group_by(RID) %>%
mutate(tstart = ifelse(VISCODE == 1, 0, lag(VISCODE)),
tstop = ifelse(VISCODE != 1, VISCODE, 1),
tRecovery = ifelse(lag(outcome_var == 1) & outcome_var == 0, 1, 0),
tRecovery = ifelse(is.na(tRecovery),0,tRecovery),
ntRecovery = ifelse(any(tRecovery == 1),1,0),)%>%
filter(ntRecovery==0) %>%
relocate(MMSE_cut, .before=tRecovery)
cox_filtered_dat <- cox_filtered_dat %>%
mutate(thirtile_PGS= as.factor(thirtile_PGS),
AGE = as.numeric(AGE),
GENDER = as.factor(GENDER),
PTGENDER = as.factor(PTGENDER))
}
# Fits a Cox Hazards model on a data frame
fit_coxph <- function(event, filtered_data_frame){
coxph(Surv(tstart, tstop, get(event)) ~ thirtile_PGS+AGE+PTGENDER+AGE*PTGENDER, # Polygenic Risk Score EA
data = filtered_data_frame)
}
# Plots the survival curve of a Cox Hazards model
plot_coxph <- function(coxph_model){
pgs_df<- with(cox_filtered_dat,
data.frame(
thirtile_PGS = c("Low PGS","Medium PGS","High PGS"),
AGE = rep(mean(cox_filtered_dat$AGE), 3),
PTGENDER = c("Male","Male","Male"))
)
ggsurvplot(
survfit(coxph_model, newdata = pgs_df),
data = cox_filtered_dat,
legend.labs = c("Low PGS","Medium PGS","High PGS"),
ggtheme = theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray"),
panel.grid.minor = element_line(color = "gray", size = 0.2)
),
title = "Survival Curve (MMSE_cut ~ PGS + AGE + GENDER + AGExGENDER)",
xlab = "Time",
ylab = "Survival Probability",
xlim = c(1.5, 11),
palette = c("#021636", "#bbceed", "#0a77f5"),
conf.int = FALSE  # Show confidence intervals
)
}
# Tests model assumption for the model
test_coxph <- function(coxph_model, outcome_var, filtered_data_frame){
# Testing Proportional Hazards
test.ph <- cox.zph(coxph_model)
test.ph
ggcoxzph(test.ph)
# Testing Outliers & Influential Cases
ggcoxdiagnostics(coxph_model,
type = "dfbeta",
linear.predictions = FALSE,
ggtheme=theme_bw())
}
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_res <- ntile(wide_dat$res, 3)
boxplot(wide_dat$res ~ wide_dat$thirtile_res,
xlab = "Thirtile of Residual Scores",
ylab = "Residuals",
main = "Check overlap between Thirtiles")
hist(wide_dat$PTEDUCAT,
xlab = "Education in Years",
ylab = "Frequency",
main = "Histogram of Education Distribution")
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_years <- ntile(wide_dat$PTEDUCAT, 3)
# Divide the PGS score for educational attainment into upper, middle and lower quartile
wide_dat$thirtile_PGS <- ntile(wide_dat$EA22, 3)
wide_dat_sub <- wide_dat[, c("RID", "thirtile_res", "res", "thirtile_years", "thirtile_PGS")]
# Merge Thirtile and residuals in long data format based on RID
long_dat <- merge(wide_dat_sub, long_dat, by="RID", all.y=TRUE)
cvalue <- list() # initialize list of cut-off values
logrank_test <- list() # initialize list of log-rank tests
long_dat$MMSE_norm <- normMMSE(long_dat$MMSE) # normalize MMSE
cvalue$MMSE_norm <- wide_dat %>% # Calculate cut-off value for normalized MMSE
filter(DX_0 == "CN") %>%
summarize(
value := mean(normMMSE(MMSE_0), na.rm = TRUE) - 2 * sd(normMMSE(MMSE_0), na.rm = TRUE)
) %>%
pull(value)
long_dat$MMSE_cut <- ifelse(long_dat$MMSE_norm < cvalue$MMSE_norm, 1, 0) # Group individuals by cut-off value
filtered_long_dat <- long_dat %>% #filter out NA cases (== AGE is not between 60-75)
filter(!is.na(Age_Group), VISCODE==0)
# Boxplot for MMSE by Age Group
box1 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of raw MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title     # Custom title
# Boxplot for normMMSE by Age Group
box2 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE_norm)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of norm MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title
res <- lm(MMSE ~ EA22 + Age_Group, data = long_dat)
res2 <- lm(MMSE_norm ~ EA22 + Age_Group, data = long_dat)
grid.arrange(box1, box2, ncol = 2)
summary(res)
summary(res2)
rm(filtered_long_dat, box1, box2, res, res2)
cox_filtered_dat <- long_dat %>% # filter the data
filter(VISCODE <= 9, AGE >= 60, AGE <= 75) %>%
select(RID, VISCODE, AGE, PTGENDER, MMSE_norm, MMSE_cut, thirtile_res, thirtile_PGS, thirtile_years) %>%
arrange(RID, VISCODE) %>%
mutate(GENDER = ifelse(PTGENDER== "Male", 0,1), # Calculate numerical Gender variable
AGExGENDER = AGE*GENDER, # Calculate interaction term manually
VISCODE = VISCODE + 1,
thirtile_PGS = case_when(
thirtile_PGS == 1 ~ "Low PGS",
thirtile_PGS == 2 ~ "Medium PGS",
thirtile_PGS == 3 ~ "High PGS",
TRUE ~ as.character(thirtile_PGS)
)
)
cox_filtered_dat <- cox_filtered_dat %>%
group_by(RID) %>%
mutate(tstart = ifelse(VISCODE == 1, 0, lag(VISCODE)),
tstop = ifelse(VISCODE != 1, VISCODE, 1),
tRecovery = ifelse(lag(MMSE_cut == 1) & MMSE_cut == 0, 1, 0),
tRecovery = ifelse(is.na(tRecovery),0,tRecovery),
ntRecovery = ifelse(any(tRecovery == 1),1,0),)%>%
filter(ntRecovery==0) %>%
relocate(MMSE_cut, .before=tRecovery)
cox_filtered_dat <- cox_filtered_dat %>%
mutate(thirtile_PGS= as.factor(thirtile_PGS),
AGE = as.numeric(AGE),
GENDER = as.factor(GENDER),
PTGENDER = as.factor(PTGENDER))
length(unique(long_dat$RID)) # Number of individuals overall
length(unique(cox_filtered_dat$RID)) # Number of unique individuals in the analysis
print(gender_counts <- cox_filtered_dat %>% # Number of Males/Females in Sample
distinct(RID, .keep_all = TRUE) %>%
group_by(PTGENDER) %>%
summarize(Count = n()))
print(age_dist <- cox_filtered_dat %>% # Number of Individual by Time-point
group_by(VISCODE) %>%
summarize(Count = n()))
cox_filtered_dat$thirtile_PGS <- factor(cox_filtered_dat$thirtile_PGS, levels = c("Low PGS","Medium PGS","High PGS")) # Adjust PGS to String for clearer Interpretation
cox_filtered_dat <- within(cox_filtered_dat,thirtile_PGS <- relevel(thirtile_PGS, ref="Medium PGS")) # Change the Reference Level of the PGS factor
res.cox <- coxph(Surv(tstart, tstop, MMSE_cut) ~ thirtile_PGS+AGE+PTGENDER+AGE*PTGENDER, # Polygenic Risk Score EA
data = cox_filtered_dat)
summary(res.cox) # Results of Models
# Creates Cox Proportional Harzards regression model
res.cox <- fit_coxph("MMSE_cut", cox_filtered_dat)
# Plots the Cox model
plot_coxph(res.cox)
# Tests model assumptions
test_coxph(res.cox, "MMSE_cut", cox_filtered_dat)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, MMSE_cut) ~ AGE, data = cox_filtered_dat)
# Calculates cut-off values using mean + 2SD of control (cognitively normal) at baseline
calc_pos_cvalue <- function(variable) {
var_bl <- paste0(deparse(substitute(variable)), "_0")
value <- wide_dat %>%
filter(DX_0 == "CN") %>%
summarize(
{{ variable }} := mean(.[[ var_bl ]], na.rm = TRUE) + 2 * sd(.[[ var_bl ]], na.rm = TRUE)
) %>%
pull({{ variable }})  # Extract the calculated value
return(value)
}
filter_data <- function(outcome_var){
cox_filtered_dat <- long_dat %>% # filter the data
filter(VISCODE <= 9, AGE >= 60, AGE <= 75) %>%
select(RID, VISCODE, AGE, PTGENDER, outcome_var, thirtile_res, thirtile_PGS, thirtile_years) %>%
arrange(RID, VISCODE) %>%
mutate(GENDER = ifelse(PTGENDER== "Male", 0,1), # Calculate numerical Gender variable
AGExGENDER = AGE*GENDER, # Calculate interaction term manually
VISCODE = VISCODE + 1,
thirtile_PGS = case_when(
thirtile_PGS == 1 ~ "Low PGS",
thirtile_PGS == 2 ~ "Medium PGS",
thirtile_PGS == 3 ~ "High PGS",
TRUE ~ as.character(thirtile_PGS)
)
)
cox_filtered_dat <- cox_filtered_dat %>%
group_by(RID) %>%
mutate(tstart = ifelse(VISCODE == 1, 0, lag(VISCODE)),
tstop = ifelse(VISCODE != 1, VISCODE, 1),
tRecovery = ifelse(lag(outcome_var == 1) & outcome_var == 0, 1, 0),
tRecovery = ifelse(is.na(tRecovery),0,tRecovery),
ntRecovery = ifelse(any(tRecovery == 1),1,0),)%>%
filter(ntRecovery==0) %>%
relocate(MMSE_cut, .before=tRecovery)
cox_filtered_dat <- cox_filtered_dat %>%
mutate(thirtile_PGS= as.factor(thirtile_PGS),
AGE = as.numeric(AGE),
GENDER = as.factor(GENDER),
PTGENDER = as.factor(PTGENDER))
}
# Fits a Cox Hazards model on a data frame
fit_coxph <- function(event, filtered_data_frame){
coxph(Surv(tstart, tstop, get(event)) ~ thirtile_PGS+AGE+PTGENDER+AGE*PTGENDER, # Polygenic Risk Score EA
data = filtered_data_frame)
}
# Plots the survival curve of a Cox Hazards model
plot_coxph <- function(coxph_model){
pgs_df<- with(cox_filtered_dat,
data.frame(
thirtile_PGS = c("Low PGS","Medium PGS","High PGS"),
AGE = rep(mean(cox_filtered_dat$AGE), 3),
PTGENDER = c("Male","Male","Male"))
)
ggsurvplot(
survfit(coxph_model, newdata = pgs_df),
data = cox_filtered_dat,
legend.labs = c("Low PGS","Medium PGS","High PGS"),
ggtheme = theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray"),
panel.grid.minor = element_line(color = "gray", size = 0.2)
),
title = "Survival Curve (MMSE_cut ~ PGS + AGE + GENDER + AGExGENDER)",
xlab = "Time",
ylab = "Survival Probability",
xlim = c(1.5, 11),
palette = c("#021636", "#bbceed", "#0a77f5"),
conf.int = FALSE  # Show confidence intervals
)
}
# Tests model assumption for the model
test_coxph <- function(coxph_model, outcome_var, filtered_data_frame){
# Testing Proportional Hazards
test.ph <- cox.zph(coxph_model)
test.ph
ggcoxzph(test.ph)
# Testing Outliers & Influential Cases
ggcoxdiagnostics(coxph_model,
type = "dfbeta",
linear.predictions = FALSE,
ggtheme=theme_bw())
}
cvalue$ADAS11 <- calc_pos_cvalue(ADAS11)
if (suppressWarnings(!require(dplyr))) {install.packages("dplyr"); library(dplyr)}
#if (suppressWarnings(!require(tidyverse))) {install.packages("tidyverse"); library(tidyverse)}
#if (suppressWarnings(!require(ggplot2))) {install.packages("ggplot2"); library(ggplot2)}
#if (suppressWarnings(!require(data.table))) {install.packages("data.table"); library(data.table)}
#if (suppressWarnings(!require(formattable))) {install.packages("formattable"); library(formattable)}
if (suppressWarnings(!require(survival))) {install.packages("survival"); library(survival)}
#if (suppressWarnings(!require(ggsurvfit))) {install.packages("ggsurvfit"); library(ggsurvfit)}
#if (suppressWarnings(!require(performance))) {install.packages("performance"); library(performance)}
#if (suppressWarnings(!require(cowplot))) {install.packages("cowplot"); library(cowplot)}
if (suppressWarnings(!require(NormPsy))) {install.packages("NormPsy"); library(NormPsy)}
if (suppressWarnings(!require(gridExtra))) {install.packages("gridExtra"); library(gridExtra)}
if (suppressWarnings(!require(rmdformats))) {install.packages("rmdformats"); library(rmdformats)}
#if (suppressWarnings(!require(nlme))) {install.packages("nlme"); library(nlme)}
if (suppressWarnings(!require(survminer))) {install.packages("survminer"); library(survminer)}
knitr::opts_chunk$set(echo = TRUE)
# Load in data from preprocessing and apply filter
long_dat <- read.csv("../1.\ preprocessing/output/long_dat.csv")
wide_dat <- read.csv("../1.\ preprocessing/output/wide_dat.csv")
# Calculates cut-off values using mean + 2SD of control (cognitively normal) at baseline
calc_pos_cvalue <- function(variable) {
var_bl <- paste0(deparse(substitute(variable)), "_0")
value <- wide_dat %>%
filter(DX_0 == "CN") %>%
summarize(
{{ variable }} := mean(.[[ var_bl ]], na.rm = TRUE) + 2 * sd(.[[ var_bl ]], na.rm = TRUE)
) %>%
pull({{ variable }})  # Extract the calculated value
return(value)
}
filter_data <- function(outcome_var){
cox_filtered_dat <- cox_filtered_dat %>%
group_by(RID) %>%
mutate(tRecovery = ifelse(lag({{outcome_var}} == 1) & {{outcome_var}} == 0, 1, 0),
tRecovery = ifelse(is.na(tRecovery),0,tRecovery),
ntRecovery = ifelse(any(tRecovery == 1),1,0),)%>%
filter(ntRecovery==0) %>%
relocate({{outcome_var}}, .before=tRecovery)
}
# Fits a Cox Hazards model on a data frame
fit_coxph <- function(event, filtered_data_frame){
coxph(Surv(tstart, tstop, get(event)) ~ thirtile_PGS+AGE+PTGENDER+AGE*PTGENDER, # Polygenic Risk Score EA
data = filtered_data_frame)
}
# Plots the survival curve of a Cox Hazards model
plot_coxph <- function(coxph_model){
pgs_df<- with(cox_filtered_dat,
data.frame(
thirtile_PGS = c("Low PGS","Medium PGS","High PGS"),
AGE = rep(mean(cox_filtered_dat$AGE), 3),
PTGENDER = c("Male","Male","Male"))
)
ggsurvplot(
survfit(coxph_model, newdata = pgs_df),
data = cox_filtered_dat,
legend.labs = c("Low PGS","Medium PGS","High PGS"),
ggtheme = theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray"),
panel.grid.minor = element_line(color = "gray", size = 0.2)
),
title = "Survival Curve (MMSE_cut ~ PGS + AGE + GENDER + AGExGENDER)",
xlab = "Time",
ylab = "Survival Probability",
xlim = c(1.5, 11),
palette = c("#021636", "#bbceed", "#0a77f5"),
conf.int = FALSE  # Show confidence intervals
)
}
# Tests model assumption for the model
test_coxph <- function(coxph_model, outcome_var, filtered_data_frame){
# Testing Proportional Hazards
test.ph <- cox.zph(coxph_model)
test.ph
ggcoxzph(test.ph)
# Testing Outliers & Influential Cases
ggcoxdiagnostics(coxph_model,
type = "dfbeta",
linear.predictions = FALSE,
ggtheme=theme_bw())
}
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_res <- ntile(wide_dat$res, 3)
boxplot(wide_dat$res ~ wide_dat$thirtile_res,
xlab = "Thirtile of Residual Scores",
ylab = "Residuals",
main = "Check overlap between Thirtiles")
hist(wide_dat$PTEDUCAT,
xlab = "Education in Years",
ylab = "Frequency",
main = "Histogram of Education Distribution")
# Divide the standardized residuals into upper, middle and lower quartile
wide_dat$thirtile_years <- ntile(wide_dat$PTEDUCAT, 3)
# Divide the PGS score for educational attainment into upper, middle and lower quartile
wide_dat$thirtile_PGS <- ntile(wide_dat$EA22, 3)
wide_dat_sub <- wide_dat[, c("RID", "thirtile_res", "res", "thirtile_years", "thirtile_PGS")]
# Merge Thirtile and residuals in long data format based on RID
long_dat <- merge(wide_dat_sub, long_dat, by="RID", all.y=TRUE)
cvalue <- list() # initialize list of cut-off values
logrank_test <- list() # initialize list of log-rank tests
long_dat$MMSE_norm <- normMMSE(long_dat$MMSE) # normalize MMSE
cvalue$MMSE_norm <- wide_dat %>% # Calculate cut-off value for normalized MMSE
filter(DX_0 == "CN") %>%
summarize(
value := mean(normMMSE(MMSE_0), na.rm = TRUE) - 2 * sd(normMMSE(MMSE_0), na.rm = TRUE)
) %>%
pull(value)
long_dat$MMSE_cut <- ifelse(long_dat$MMSE_norm < cvalue$MMSE_norm, 1, 0) # Group individuals by cut-off value
filtered_long_dat <- long_dat %>% #filter out NA cases (== AGE is not between 60-75)
filter(!is.na(Age_Group), VISCODE==0)
# Boxplot for MMSE by Age Group
box1 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of raw MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title     # Custom title
# Boxplot for normMMSE by Age Group
box2 <- ggplot(filtered_long_dat, aes(x = factor(Age_Group), y = MMSE_norm)) +
geom_boxplot(fill = c("#6d8fa6", "#8596a1","#bbceed"), color = "black") + # Set fill and border colours
scale_x_discrete(labels = c("60-65", "66-70", "71-75")) + # Set x axis scale labels
labs(x = "Age Group", y = "MMSE Score") +
theme_minimal() +
theme(axis.line = element_line(size = 0.5),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Adjust title
axis.title = element_text(size = 12),  # Adjust axis title font size
axis.text = element_text(size = 10),   # Adjust axis text font size
panel.grid.major = element_blank(),     # Remove major grid lines
panel.grid.minor = element_blank()) +   # Remove minor grid lines
ggtitle("Boxplot of norm MMSE at baseline by Age Group") +
theme(plot.title = element_text(size = 9)) # Custom title
res <- lm(MMSE ~ EA22 + Age_Group, data = long_dat)
res2 <- lm(MMSE_norm ~ EA22 + Age_Group, data = long_dat)
grid.arrange(box1, box2, ncol = 2)
summary(res)
summary(res2)
rm(filtered_long_dat, box1, box2, res, res2)
cox_filtered_dat <- long_dat %>% # filter the data
filter(VISCODE <= 9, AGE >= 60, AGE <= 75) %>%
#select(RID, VISCODE, AGE, PTGENDER, MMSE_norm, MMSE_cut, thirtile_res, thirtile_PGS, thirtile_years) %>%
arrange(RID, VISCODE) %>%
mutate(GENDER = ifelse(PTGENDER== "Male", 0,1), # Calculate numerical Gender variable
AGExGENDER = AGE*GENDER, # Calculate interaction term manually
VISCODE = VISCODE + 1,
thirtile_PGS = case_when(
thirtile_PGS == 1 ~ "Low PGS",
thirtile_PGS == 2 ~ "Medium PGS",
thirtile_PGS == 3 ~ "High PGS",
TRUE ~ as.character(thirtile_PGS)
)
)
cox_filtered_dat <- cox_filtered_dat %>%
group_by(RID) %>%
mutate(tstart = ifelse(VISCODE == 1, 0, lag(VISCODE)),
tstop = ifelse(VISCODE != 1, VISCODE, 1),
tRecovery = ifelse(lag(MMSE_cut == 1) & MMSE_cut == 0, 1, 0),
tRecovery = ifelse(is.na(tRecovery),0,tRecovery),
ntRecovery = ifelse(any(tRecovery == 1),1,0),)%>%
filter(ntRecovery==0) %>%
relocate(MMSE_cut, .before=tRecovery)
cox_filtered_dat <- cox_filtered_dat %>%
mutate(thirtile_PGS= as.factor(thirtile_PGS),
AGE = as.numeric(AGE),
GENDER = as.factor(GENDER),
PTGENDER = as.factor(PTGENDER))
length(unique(long_dat$RID)) # Number of individuals overall
length(unique(cox_filtered_dat$RID)) # Number of unique individuals in the analysis
print(gender_counts <- cox_filtered_dat %>% # Number of Males/Females in Sample
distinct(RID, .keep_all = TRUE) %>%
group_by(PTGENDER) %>%
summarize(Count = n()))
print(age_dist <- cox_filtered_dat %>% # Number of Individual by Time-point
group_by(VISCODE) %>%
summarize(Count = n()))
cox_filtered_dat$thirtile_PGS <- factor(cox_filtered_dat$thirtile_PGS, levels = c("Low PGS","Medium PGS","High PGS")) # Adjust PGS to String for clearer Interpretation
cox_filtered_dat <- within(cox_filtered_dat,thirtile_PGS <- relevel(thirtile_PGS, ref="Medium PGS")) # Change the Reference Level of the PGS factor
# Creates Cox Proportional Harzards regression model
res.cox <- fit_coxph("MMSE_cut", cox_filtered_dat)
# Results of Models
summary(res.cox)
# Plots the Cox model
plot_coxph(res.cox)
# Tests model assumptions
test_coxph(res.cox, "MMSE_cut", cox_filtered_dat)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, MMSE_cut) ~ AGE, data = cox_filtered_dat)
cvalue$ADAS11 <- calc_pos_cvalue(ADAS11)
cox_filtered_dat$ADAS11_cut <- ifelse(cox_filtered_dat$ADAS11 > cvalue$ADAS11, 1, 0)
data_test <- filter_data(ADAS11_cut)
View(data_test)
View(filter_data)
data_test$ADAS11_cut
data_test$tRecovery
table(data_test)
table(data_test[, c("RID", "ADAS11", "ADAS11_cut", "tRecovery", "ntRecovery")])
test <- table(data_test[, c("RID", "ADAS11", "ADAS11_cut", "tRecovery", "ntRecovery")])
test
test
head(test)
data_test[, c("RID", "ADAS11", "ADAS11_cut", "tRecovery", "ntRecovery")]
cvalue$ADAS11
View(filter_data)
# Creates Cox Proportional Harzards regression model
res.cox <- fit_coxph("ADAS_cut", ADAS11_df)
ADAS11_df <- filter_data(ADAS11_cut)
# Creates Cox Proportional Harzards regression model
res.cox <- fit_coxph("ADAS_cut", ADAS11_df)
# Creates Cox Proportional Harzards regression model
res.cox <- fit_coxph("ADAS11_cut", ADAS11_df)
# Results of Models
summary(res.cox)
# Plots the Cox model
plot_coxph(res.cox)
# Tests model assumptions
test_coxph(res.cox, "ADAS11_cut", ADAS11_df)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, MMSE_cut) ~ AGE, data = ADAS11_df)
View(filter_data)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, ADAS13_cut) ~ AGE, data = cox_filtered_dat)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, ADAS11_cut) ~ AGE, data = cox_filtered_dat)
cvalue$ADAS13 <- calc_pos_cvalue(ADAS13)
cox_filtered_dat$ADAS11_cut <- ifelse(cox_filtered_dat$ADAS13 > cvalue$ADAS13, 1, 0)
cox_filtered_dat <- filter_data(ADAS13_cut)
cvalue$ADAS13 <- calc_pos_cvalue(ADAS13)
cox_filtered_dat$ADAS13_cut <- ifelse(cox_filtered_dat$ADAS13 > cvalue$ADAS13, 1, 0)
View(filter_data)
cox_filtered_dat <- filter_data(ADAS13_cut)
# Creates Cox Proportional Harzards regression model
res.cox <- fit_coxph("ADAS13_cut", cox_filtered_dat)
# Results of Models
summary(res.cox)
# Plots the Cox model
plot_coxph(res.cox)
# Tests model assumptions
test_coxph(res.cox, "ADAS13_cut", cox_filtered_dat)
# Tests model assumptions
test_coxph(res.cox, "ADAS13_cut", cox_filtered_dat)
# Testing Non-Linearity
ggcoxfunctional(Surv(VISCODE, ADAS13_cut) ~ AGE, data = cox_filtered_dat)
